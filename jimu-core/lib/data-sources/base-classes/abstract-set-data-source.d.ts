import { AbstractDataSource } from './abstract-data-source';
import { type DataSource } from '../interfaces';
export declare abstract class AbstractSetDataSource extends AbstractDataSource implements DataSource {
    isDataSourceSet: boolean;
    protected childDataSourcesCreated: boolean;
    protected childDataSourcePromises: {
        [childDsId: string]: Promise<DataSource>;
    };
    /**
     * Create a child data source by its ID.
     * @param childDsId the data source id, used in data source constructor options.
     * @param jimuChildId the jimu child id, used in data source constructor options.
     * @param childId the short ID for child data source, generated by implement classes, see `getChildIds` method.
     */
    protected abstract createChildDataSourceById(childDsId: string, jimuChildId: string, childId: string): Promise<DataSource>;
    /**
     * Get all child data sources' child id.
     * The child id is generated from original data (AGOL/portal item or a remote database).
     * The child id can be the JS API layer ID or layer service ID, without spaces.
     */
    protected abstract getChildIds(): string[];
    ready(): Promise<void>;
    childDataSourcesReady(): Promise<DataSource[]>;
    areChildDataSourcesCreated(): boolean;
    createChildDataSourcesRecursively(): Promise<DataSource[]>;
    createChildDataSources(): Promise<DataSource[]>;
    createDataSourceById(dataSourceId: string): Promise<DataSource>;
    protected findChildDataSourceIdByDescendantDataSourceId(dataSourceId: string): string;
    getChildDataSourceIds(): string[];
    destroy(): void;
    areSomeChildDataSourcesPending(): Promise<boolean>;
    getChildDataSourceId(jimuChildId: string): string;
    getChildDataSources(): DataSource[];
    getAllChildDataSources(): DataSource[];
    getChildDataSource(jimuChildId: string): DataSource;
    getJimuChildId(childId: string): string[];
    clearChildDataSourcePromise(childDsId: string): void;
}
